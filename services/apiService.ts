import type { PatientRecord, InClinicProcedure, ScarPatientRecord, AcnePatientRecord, CosmeticInfo, RejuvenationPatientRecord } from '../types';
import { addPatientRecord, getPatientHistory, addScarRecord, addAcneRecord, addRejuvenationRecord } from './dbService';

/**
 * Fetches the patient history from the local IndexedDB database.
 * @returns A promise that resolves to an array of patient records.
 */
export const fetchPatientHistory = async (): Promise<PatientRecord[]> => {
  console.log("FETCHING PATIENT HISTORY FROM INDEXEDDB...");
  // Simulate a small network delay for better UX feedback on loading states
  await new Promise(resolve => setTimeout(resolve, 500));
  try {
    const records = await getPatientHistory();
    console.log("FETCHED HISTORY SUCCESSFULLY.");
    return records;
  } catch (error) {
    console.error("Failed to fetch patient history:", error);
    throw new Error("Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ b·ªánh nh√¢n t·ª´ c∆° s·ªü d·ªØ li·ªáu c·ª•c b·ªô.");
  }
};


/**
 * Saves a patient record to the local IndexedDB database.
 * @param record - The patient record object to save.
 * @returns A promise that resolves to an object containing success status and a message.
 */
export const saveRecordToDatabase = async (record: Omit<PatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log("SAVING TO INDEXEDDB:", record);
  try {
    await addPatientRecord(record);
    console.log("SAVED TO DATABASE SUCCESSFULLY.");
    return { success: true, message: "H·ªì s∆° ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o database." };
  } catch(e) {
    console.error("Error saving to database:", e);
    // Re-throw a user-friendly error message
    throw new Error("Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu v√†o database c·ª•c b·ªô.");
  }
};


/**
 * MOCKS: Simulates saving a record to a remote server.
 * For application consistency, this action also saves the record to the local IndexedDB.
 * @param record - The patient record object to save.
 * @returns A promise that resolves to an object containing success status and a message.
 */
export const savePatientRecord = async (record: Omit<PatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log("SIMULATING REMOTE SAVE & SAVING LOCALLY:", record);
  await saveRecordToDatabase(record); // Persist to local DB
  
  // Simulate remote API call latency
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  console.log("SIMULATED REMOTE SAVE SUCCESSFUL.");
  return { success: true, message: "H·ªì s∆° ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng." };
};

/**
 * MOCKS: Simulates sending an email with the treatment plan to the patient.
 * In a real application, this would call a backend API.
 * @param record - The patient record object containing the info to be sent.
 * @returns A promise that resolves to an object containing success status and a message.
 */
export const sendEmailToPatient = async (record: Omit<PatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log(`SIMULATING SENDING EMAIL TO ${record.patientInfo.email}:`, record);

  // Simulate network delay for the email sending API call
  await new Promise(resolve => setTimeout(resolve, 1500));

  console.log("SIMULATED EMAIL SENT SUCCESSFULLY.");
  return { success: true, message: `Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${record.patientInfo.email}.` };
};

/**
 * MOCKS: Simulates sending a Zalo message with the treatment plan to the patient.
 * In a real application, this would call a backend API that integrates with Zalo OA API.
 * @param record - The patient record object containing the info to be sent.
 * @returns A promise that resolves to an object containing success status and a message.
 */
export const sendZaloMessage = async (record: Omit<PatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  const { patientInfo, diagnosis, treatmentPlan } = record;

  const formatList = (items: string[]) => items.map(item => `- ${item}`).join('\n');

  const message = `
Ch√†o ${patientInfo.fullName},

Ph√≤ng kh√°m g·ª≠i b·∫°n k·∫øt qu·∫£ ch·∫©n ƒëo√°n v√† ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã da c·ªßa m√¨nh:

üî¨ *CH·∫®N ƒêO√ÅN*
- T√¨nh tr·∫°ng: ${diagnosis.condition}
- M·ª©c ƒë·ªô: ${diagnosis.severity}
- Ph√¢n t√≠ch chi ti·∫øt: ${diagnosis.analysis}

üìã *PH√ÅC ƒê·ªí ƒêI·ªÄU TR·ªä*

**Bu·ªïi s√°ng:**
${formatList(treatmentPlan.morningRoutine)}

**Bu·ªïi t·ªëi:**
${formatList(treatmentPlan.eveningRoutine)}

**Li·ªáu tr√¨nh t·∫°i ph√≤ng kh√°m:**
${formatList(treatmentPlan.inClinicProcedures.map(p => `${p.name} (${p.frequency}): ${p.description}`))}

---
L∆∞u √Ω: ƒê√¢y l√† ph√°c ƒë·ªì do AI ƒë·ªÅ xu·∫•t v√† ƒë√£ ƒë∆∞·ª£c b√°c sƒ© xem x√©t. Vui l√≤ng tu√¢n th·ªß h∆∞·ªõng d·∫´n v√† li√™n h·ªá v·ªõi ph√≤ng kh√°m n·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.
`;

  console.log(`SIMULATING SENDING ZALO MESSAGE TO ${patientInfo.phoneNumber}:`, message);

  // Simulate network delay for the Zalo API call
  await new Promise(resolve => setTimeout(resolve, 1800));

  console.log("SIMULATED ZALO MESSAGE SENT SUCCESSFULLY.");
  return { success: true, message: `Tin nh·∫Øn Zalo ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${patientInfo.phoneNumber}.` };
};


// --- SCAR RECORD FUNCTIONS ---

export const saveScarRecordToDatabase = async (record: Omit<ScarPatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log("SAVING SCAR RECORD TO INDEXEDDB:", record);
  try {
    await addScarRecord(record);
    console.log("SAVED SCAR RECORD TO DATABASE SUCCESSFULLY.");
    return { success: true, message: "H·ªì s∆° tr·ªã s·∫πo ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o database." };
  } catch(e) {
    console.error("Error saving scar record to database:", e);
    throw new Error("Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu tr·ªã s·∫πo v√†o database c·ª•c b·ªô.");
  }
};

export const sendZaloMessageForScar = async (record: Omit<ScarPatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  const { patientInfo, analysisResult } = record;
  const { treatmentPlan } = analysisResult;

  const formatList = (items: string[]) => items.map(item => `- ${item}`).join('\n');
  const formatProcedures = (items: InClinicProcedure[]) => items.map(p => `- ${p.name} (${p.frequency}): ${p.description}`).join('\n');

  const message = `
Ch√†o ${patientInfo.fullName},

Ph√≤ng kh√°m g·ª≠i b·∫°n ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã s·∫πo c·ªßa m√¨nh:

üî¨ *ƒê√ÅNH GI√Å T√åNH TR·∫†NG*
${analysisResult.assessment}

üìã *PH√ÅC ƒê·ªí ƒêI·ªÄU TR·ªä*

**Li·ªáu tr√¨nh t·∫°i ph√≤ng kh√°m:**
${formatProcedures(treatmentPlan.inClinicProcedures)}

**ChƒÉm s√≥c t·∫°i nh√†:**
${formatList(treatmentPlan.homeCareRoutine)}

**L·ªô tr√¨nh ƒëi·ªÅu tr·ªã:** ${treatmentPlan.timeline}
**K·∫øt qu·∫£ mong ƒë·ª£i:** ${treatmentPlan.expectedOutcome}

---
L∆∞u √Ω: ƒê√¢y l√† ph√°c ƒë·ªì do AI ƒë·ªÅ xu·∫•t v√† ƒë√£ ƒë∆∞·ª£c b√°c sƒ© xem x√©t. Vui l√≤ng tu√¢n th·ªß h∆∞·ªõng d·∫´n v√† li√™n h·ªá v·ªõi ph√≤ng kh√°m n·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.
`;

  console.log(`SIMULATING SENDING ZALO MESSAGE FOR SCAR TO ${patientInfo.phoneNumber}:`, message);
  await new Promise(resolve => setTimeout(resolve, 1800));
  console.log("SIMULATED ZALO MESSAGE SENT SUCCESSFULLY.");
  return { success: true, message: `Tin nh·∫Øn Zalo ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${patientInfo.phoneNumber}.` };
};

export const sendEmailToPatientForScar = async (record: Omit<ScarPatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log(`SIMULATING SENDING SCAR PLAN EMAIL TO ${record.patientInfo.email}:`, record);
  await new Promise(resolve => setTimeout(resolve, 1500));
  console.log("SIMULATED EMAIL SENT SUCCESSFULLY.");
  return { success: true, message: `Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${record.patientInfo.email}.` };
};


// --- ACNE RECORD FUNCTIONS ---

export const saveAcneRecordToDatabase = async (record: Omit<AcnePatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log("SAVING ACNE RECORD TO INDEXEDDB:", record);
  try {
    await addAcneRecord(record);
    console.log("SAVED ACNE RECORD TO DATABASE SUCCESSFULLY.");
    return { success: true, message: "H·ªì s∆° tr·ªã m·ª•n ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o database." };
  } catch (e) {
    console.error("Error saving acne record to database:", e);
    throw new Error("Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu tr·ªã m·ª•n v√†o database c·ª•c b·ªô.");
  }
};

export const sendZaloMessageForAcne = async (record: Omit<AcnePatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  const { patientInfo, analysisResult } = record;
  const { treatmentPlan } = analysisResult;

  const formatList = (items: string[]) => items.map(item => `- ${item}`).join('\n');
  const formatProcedures = (items: InClinicProcedure[]) => items.map(p => `- ${p.name} (${p.frequency}): ${p.description}`).join('\n');

  const message = `
Ch√†o ${patientInfo.fullName},

Ph√≤ng kh√°m g·ª≠i b·∫°n ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã m·ª•n c·ªßa m√¨nh:

üî¨ *ƒê√ÅNH GI√Å T√åNH TR·∫†NG M·ª§N*
${analysisResult.assessment}

üìã *PH√ÅC ƒê·ªí ƒêI·ªÄU TR·ªä*

**Li·ªáu tr√¨nh t·∫°i ph√≤ng kh√°m:**
${formatProcedures(treatmentPlan.inClinicProcedures)}

**ChƒÉm s√≥c t·∫°i nh√†:**
${formatList(treatmentPlan.homeCareRoutine)}

**L·ªùi khuy√™n v·ªÅ l·ªëi s·ªëng:**
${formatList(treatmentPlan.lifestyleAdvice)}

---
L∆∞u √Ω: ƒê√¢y l√† ph√°c ƒë·ªì do AI ƒë·ªÅ xu·∫•t v√† ƒë√£ ƒë∆∞·ª£c b√°c sƒ© xem x√©t. Vui l√≤ng tu√¢n th·ªß h∆∞·ªõng d·∫´n v√† li√™n h·ªá v·ªõi ph√≤ng kh√°m n·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.
`;

  console.log(`SIMULATING SENDING ZALO MESSAGE FOR ACNE TO ${patientInfo.phoneNumber}:`, message);
  await new Promise(resolve => setTimeout(resolve, 1800));
  console.log("SIMULATED ZALO MESSAGE SENT SUCCESSFULLY.");
  return { success: true, message: `Tin nh·∫Øn Zalo ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${patientInfo.phoneNumber}.` };
};

export const sendEmailToPatientForAcne = async (record: Omit<AcnePatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log(`SIMULATING SENDING ACNE PLAN EMAIL TO ${record.patientInfo.email}:`, record);
  await new Promise(resolve => setTimeout(resolve, 1500));
  console.log("SIMULATED EMAIL SENT SUCCESSFULLY.");
  return { success: true, message: `Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${record.patientInfo.email}.` };
};

// --- REJUVENATION RECORD FUNCTIONS ---

export const saveRejuvenationRecordToDatabase = async (record: Omit<RejuvenationPatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log("SAVING REJUVENATION RECORD TO INDEXEDDB:", record);
  try {
    await addRejuvenationRecord(record);
    console.log("SAVED REJUVENATION RECORD TO DATABASE SUCCESSFULLY.");
    return { success: true, message: "H·ªì s∆° tr·∫ª h√≥a ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o database." };
  } catch (e) {
    console.error("Error saving rejuvenation record to database:", e);
    throw new Error("Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu tr·∫ª h√≥a v√†o database c·ª•c b·ªô.");
  }
};

export const sendZaloMessageForRejuvenation = async (record: Omit<RejuvenationPatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  const { patientInfo, analysisResult } = record;
  const { treatmentPlan } = analysisResult;

  const formatList = (items: string[]) => items.map(item => `- ${item}`).join('\n');
  const formatProcedures = (items: InClinicProcedure[]) => items.map(p => `- ${p.name} (${p.frequency}): ${p.description}`).join('\n');

  const message = `
Ch√†o ${patientInfo.fullName},

Ph√≤ng kh√°m g·ª≠i b·∫°n ph√°c ƒë·ªì tr·∫ª h√≥a da c·ªßa m√¨nh:

üî¨ *ƒê√ÅNH GI√Å T√åNH TR·∫†NG L√ÉO H√ìA*
${analysisResult.assessment}

üìã *PH√ÅC ƒê·ªí ƒêI·ªÄU TR·ªä*

**L·ªãch tr√¨nh ƒëi·ªÅu tr·ªã:**
${formatList(treatmentPlan.treatmentSchedule)}

**Li·ªáu tr√¨nh c√¥ng ngh·ªá cao:**
${formatProcedures(treatmentPlan.highTechProcedures)}

**Li·ªáu ph√°p ti√™m:**
${formatProcedures(treatmentPlan.injectionTherapies)}

**ChƒÉm s√≥c t·∫°i nh√†:**
${formatList(treatmentPlan.homeCareRoutine)}

---
L∆∞u √Ω: ƒê√¢y l√† ph√°c ƒë·ªì do AI ƒë·ªÅ xu·∫•t v√† ƒë√£ ƒë∆∞·ª£c b√°c sƒ© xem x√©t. Vui l√≤ng tu√¢n th·ªß h∆∞·ªõng d·∫´n v√† li√™n h·ªá v·ªõi ph√≤ng kh√°m n·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.
`;

  console.log(`SIMULATING SENDING ZALO MESSAGE FOR REJUVENATION TO ${patientInfo.phoneNumber}:`, message);
  await new Promise(resolve => setTimeout(resolve, 1800));
  console.log("SIMULATED ZALO MESSAGE SENT SUCCESSFULLY.");
  return { success: true, message: `Tin nh·∫Øn Zalo ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${patientInfo.phoneNumber}.` };
};

export const sendEmailToPatientForRejuvenation = async (record: Omit<RejuvenationPatientRecord, 'id' | 'createdAt'>): Promise<{ success: boolean; message: string }> => {
  console.log(`SIMULATING SENDING REJUVENATION PLAN EMAIL TO ${record.patientInfo.email}:`, record);
  await new Promise(resolve => setTimeout(resolve, 1500));
  console.log("SIMULATED EMAIL SENT SUCCESSFULLY.");
  return { success: true, message: `Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi ${record.patientInfo.email}.` };
};


// FIX: Added function to fetch products from a public Google Sheet CSV URL.
export const fetchProductsFromGoogleSheet = async (url: string): Promise<CosmeticInfo[]> => {
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Google Sheet fetch failed with status ${response.status}`);
        }
        const csvText = await response.text();
        const rows = csvText.split(/\r?\n/).slice(1); // Split by newline, remove header

        const products: CosmeticInfo[] = rows
            .map(row => {
                // A very basic CSV parser, assumes no commas within fields
                const columns = row.split(',');
                if (columns.length < 6) return null;

                const usageValue = columns[5]?.trim().toLowerCase();
                let usage: 'morning' | 'evening' | 'both' = 'both';
                if (usageValue === 'morning' || usageValue === 'evening') {
                    usage = usageValue;
                }

                return {
                    name: columns[0]?.trim() || '',
                    brand: columns[1]?.trim() || 'N/A',
                    url: columns[2]?.trim() || '#',
                    description: columns[3]?.trim() || '',
                    keywords: columns[4]?.trim().split(';').map(k => k.trim()).filter(Boolean) || [],
                    usage: usage,
                };
            })
            .filter((p): p is CosmeticInfo => p !== null && p.name !== '');

        return products;
    } catch (error) {
        console.error("Error fetching or parsing Google Sheet CSV:", error);
        throw new Error("Kh√¥ng th·ªÉ t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Google Sheet. Vui l√≤ng ki·ªÉm tra l·∫°i URL, ƒë·ªãnh d·∫°ng file v√† ch·∫Øc ch·∫Øn r·∫±ng sheet ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n c√¥ng khai.");
    }
};